# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'es'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # JWT Custom data payload
    app_api.event.jwt_created_listener:
        class: App\EventListener\JWTListener
        arguments: [ '@request_stack', '@doctrine.orm.default_entity_manager' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }

    App\EventListener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken']

    app.doctrine.hash_password_listener:
        class: App\Doctrine\HashPasswordSubscriber
        autowire: true
        tags:
            - { name: doctrine.event_subscriber }

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~, '@service_container']
        calls:
            - [setTemplate, ['edit', 'User/edit.html.twig']]
        tags:
        - { name: sonata.admin, manager_type: orm, group: admin, label: users }

    admin.role:
        class: App\Admin\RoleAdmin
        arguments: [~, App\Entity\Role, ~, '@service_container']
        calls:
            - [setTemplate, ['edit', 'Role/edit.html.twig']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: roles }
        public: true

    admin.mnt_perfil:
        class: App\Admin\MntPerfilAdmin
        arguments: [~, App\Entity\MntPerfil,  ~ ,'@service_container']
        calls:
            - [setTemplate, ['edit', 'MntPerfil/edit.html.twig']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: MntPerfilAdmin }
        public: true

    admin.mnt_ruta:
        class: App\Admin\MntRutaAdmin
        arguments: [~, App\Entity\MntRuta, ~, '@service_container']
        calls:
            - [setTemplate, ['edit', 'MntRuta/edit.html.twig']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: MntRutaAdmin }
        public: true
